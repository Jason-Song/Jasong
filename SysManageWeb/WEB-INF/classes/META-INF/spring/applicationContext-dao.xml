<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd">

    <!-- 配置数据源 -->
    <!--
    	jndi方式tomcat的配置
    	修改文件  apache-tomcat-7.0\conf\context.xml
    	增加内容
    	<Resource name="amloa"   
                auth="Container"   
                type="javax.sql.DataSource"   
                driverClassName="com.mysql.jdbc.Driver"   
                url="jdbc:mysql://localhost:3306/amloa"   
                username="amloa"   
                password="amloa"   
                maxActive="10"   
                maxIdle="5"   
                maxWait="10000"/> 
    	
    	方式一
		使用应用服务器JNDI数据源配置示例，非Tomcat环境下配置jndi-name值为amloa，
		Tomcat环境下配置jndi-name值为java:/comp/env/amloa。
		<jee:jndi-lookup id="dataSource" jndi-name="java:/comp/env/amloa" />
		
		方式二
		<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="java:comp/env/amloa"></property>
        </bean>

		方式三
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
	        <property name="username" value="${jdbc.username}"/>
	        <property name="password" value="${jdbc.password}"/>
	        <property name="driverClassName" value="${jdbc.driver}"/>
	        <property name="url" value="${jdbc.url}"/>
	        <property name="initialSize" value="${jdbc.initialPoolSize}"/>
	        <property name="maxActive" value="${jdbc.maxPoolSize}"/>
	    </bean>
	-->
	

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="initialSize" value="${jdbc.initialPoolSize}"/>
        <property name="maxActive" value="${jdbc.maxPoolSize}"/>
    </bean>

    <!-- 配置 SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:META-INF/mybatis/mybatis-config.xml"/>
        <!-- 加载数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 加载mapper -->
        <property name="mapperLocations" value="classpath*:META-INF/mybatis/mapper/*-sqlmap.xml"/>
    </bean>

    <!-- 通过MapperScannerConfigurer进行mapper扫描（建议使用）
     mapper 批量扫描，从 mapper 包中扫描出 mapper 接口，自动创建代理对象，并在 spring 容器中注册名陈为类名首字母小写。
     遵循的规范：将 mapper.java 和 mapper.xml 映射文件名陈一致，且在同一个目录
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描的包，如果存在多个包使用(逗号,)分割 -->
        <property name="basePackage" value="com.good.sys.mapper" />
        <!-- 注意此处是sqlSessionFactoryBeanName，如果写成 sqlSessionFactory，ref="sqlSessionFactory"
             会造成 <context:property-placeholder location="classpath:META-INF/db.properties"/> 失效 而连接不上数据库
         -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    
    
    <!-- 配置事物管理器 TransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
 
	<!-- enable transaction annotation support -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
<!--     配置通知 -->
<!--     <tx:advice id="interceptorAdvice" transaction-manager="transactionManager"> -->
<!--         <tx:attributes> -->
<!--             <tx:method name="save*" propagation="REQUIRED"/> -->
<!--             <tx:method name="delete*" propagation="REQUIRED" /> -->
<!--             <tx:method name="update*" propagation="REQUIRED" /> -->
<!--             <tx:method name="insert*" propagation="REQUIRED" /> -->

<!--             <tx:method name="find*" propagation="SUPPORTS" read-only="true" /> -->
<!--             <tx:method name="get*" propagation="SUPPORTS" read-only="true" /> -->
<!--             <tx:method name="select*" propagation="SUPPORTS" read-only="true" /> -->
<!--         </tx:attributes> -->
<!--     </tx:advice> -->

<!--     配置切面 aop -->
<!--     <aop:config> -->
<!--         <aop:advisor advice-ref="interceptorAdvice" pointcut="execution(* com.good.sys.*.*(..))"/> -->
<!--     </aop:config> -->
</beans>